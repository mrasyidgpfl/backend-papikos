// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "final-project/git.garena.com/sea-labs-id/batch-01/rasyid-wijaya/final-project-backend-papikos/models"

	mock "github.com/stretchr/testify/mock"
)

// GamesRepository is an autogenerated mock type for the GamesRepository type
type GamesRepository struct {
	mock.Mock
}

// UpdateUserChances provides a mock function with given fields: userId
func (_m *GamesRepository) UpdateUserChances(userId uint) (int, error) {
	ret := _m.Called(userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserWallet provides a mock function with given fields: userId, prize
func (_m *GamesRepository) UpdateUserWallet(userId uint, prize int) (*models.Wallet, error) {
	ret := _m.Called(userId, prize)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(uint, int) *models.Wallet); ok {
		r0 = rf(userId, prize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int) error); ok {
		r1 = rf(userId, prize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGamesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGamesRepository creates a new instance of GamesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGamesRepository(t mockConstructorTestingTNewGamesRepository) *GamesRepository {
	mock := &GamesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
