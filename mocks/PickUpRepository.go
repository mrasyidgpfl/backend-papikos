// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project/git.garena.com/sea-labs-id/batch-01/rasyid-wijaya/final-project-backend-papikos/dto"

	mock "github.com/stretchr/testify/mock"

	models "final-project/git.garena.com/sea-labs-id/batch-01/rasyid-wijaya/final-project-backend-papikos/models"
)

// PickUpRepository is an autogenerated mock type for the PickUpRepository type
type PickUpRepository struct {
	mock.Mock
}

// AddStatus provides a mock function with given fields: status
func (_m *PickUpRepository) AddStatus(status *models.PickUpStatus) (*models.PickUpStatus, error) {
	ret := _m.Called(status)

	var r0 *models.PickUpStatus
	if rf, ok := ret.Get(0).(func(*models.PickUpStatus) *models.PickUpStatus); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PickUpStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.PickUpStatus) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculatePickUpPrice provides a mock function with given fields: uid, r
func (_m *PickUpRepository) CalculatePickUpPrice(uid uint, r uint) (int, error) {
	ret := _m.Called(uid, r)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint, uint) int); ok {
		r0 = rf(uid, r)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(uid, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckBalance provides a mock function with given fields: userId, price
func (_m *PickUpRepository) CheckBalance(userId uint, price int) (bool, *models.Wallet, error) {
	ret := _m.Called(userId, price)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, int) bool); ok {
		r0 = rf(userId, price)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *models.Wallet
	if rf, ok := ret.Get(1).(func(uint, int) *models.Wallet); ok {
		r1 = rf(userId, price)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Wallet)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, int) error); ok {
		r2 = rf(userId, price)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountTotalPickUps provides a mock function with given fields:
func (_m *PickUpRepository) CountTotalPickUps() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePickUp provides a mock function with given fields: pickUpId, userId, request, pSId
func (_m *PickUpRepository) CreatePickUp(pickUpId uint, userId uint, request *dto.PickUpRequest, pSId uint) (*models.PickUp, error) {
	ret := _m.Called(pickUpId, userId, request, pSId)

	var r0 *models.PickUp
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.PickUpRequest, uint) *models.PickUp); ok {
		r0 = rf(pickUpId, userId, request, pSId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PickUp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.PickUpRequest, uint) error); ok {
		r1 = rf(pickUpId, userId, request, pSId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayForPickUp provides a mock function with given fields: id, price
func (_m *PickUpRepository) PayForPickUp(id uint, price int) (bool, error) {
	ret := _m.Called(id, price)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, int) bool); ok {
		r0 = rf(id, price)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int) error); ok {
		r1 = rf(id, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: request
func (_m *PickUpRepository) UpdateStatus(request *dto.UpdatePickUpStatusRequest) (*models.PickUpStatus, error) {
	ret := _m.Called(request)

	var r0 *models.PickUpStatus
	if rf, ok := ret.Get(0).(func(*dto.UpdatePickUpStatusRequest) *models.PickUpStatus); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PickUpStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.UpdatePickUpStatusRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPickUpRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPickUpRepository creates a new instance of PickUpRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPickUpRepository(t mockConstructorTestingTNewPickUpRepository) *PickUpRepository {
	mock := &PickUpRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
