// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project/git.garena.com/sea-labs-id/batch-01/rasyid-wijaya/final-project-backend-papikos/dto"

	mock "github.com/stretchr/testify/mock"

	models "final-project/git.garena.com/sea-labs-id/batch-01/rasyid-wijaya/final-project-backend-papikos/models"
)

// HouseRepository is an autogenerated mock type for the HouseRepository type
type HouseRepository struct {
	mock.Mock
}

// AddHouse provides a mock function with given fields: house
func (_m *HouseRepository) AddHouse(house *models.House) (*models.House, error) {
	ret := _m.Called(house)

	var r0 *models.House
	if rf, ok := ret.Get(0).(func(*models.House) *models.House); ok {
		r0 = rf(house)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.House)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.House) error); ok {
		r1 = rf(house)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAvailability provides a mock function with given fields: houseId, request
func (_m *HouseRepository) CheckAvailability(houseId uint, request *dto.BookHouseRequest) (bool, error) {
	ret := _m.Called(houseId, request)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, *dto.BookHouseRequest) bool); ok {
		r0 = rf(houseId, request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.BookHouseRequest) error); ok {
		r1 = rf(houseId, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckRole provides a mock function with given fields: userId
func (_m *HouseRepository) CheckRole(userId uint) (string, error) {
	ret := _m.Called(userId)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTotalBookings provides a mock function with given fields:
func (_m *HouseRepository) CountTotalBookings() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTotalHouses provides a mock function with given fields:
func (_m *HouseRepository) CountTotalHouses() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTotalPrice provides a mock function with given fields: nights, id
func (_m *HouseRepository) CountTotalPrice(nights int, id uint) (int, error) {
	ret := _m.Called(nights, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, uint) int); ok {
		r0 = rf(nights, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, uint) error); ok {
		r1 = rf(nights, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DateFilter provides a mock function with given fields: request, houses
func (_m *HouseRepository) DateFilter(request *dto.BookHouseRequest, houses []*models.House) []*models.House {
	ret := _m.Called(request, houses)

	var r0 []*models.House
	if rf, ok := ret.Get(0).(func(*dto.BookHouseRequest, []*models.House) []*models.House); ok {
		r0 = rf(request, houses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.House)
		}
	}

	return r0
}

// DeleteHouse provides a mock function with given fields: id, houseId
func (_m *HouseRepository) DeleteHouse(id uint, houseId uint) (*models.House, error) {
	ret := _m.Called(id, houseId)

	var r0 *models.House
	if rf, ok := ret.Get(0).(func(uint, uint) *models.House); ok {
		r0 = rf(id, houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.House)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBookings provides a mock function with given fields: id
func (_m *HouseRepository) FindBookings(id uint) ([]*models.Reservation, error) {
	ret := _m.Called(id)

	var r0 []*models.Reservation
	if rf, ok := ret.Get(0).(func(uint) []*models.Reservation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHouse provides a mock function with given fields: id
func (_m *HouseRepository) FindHouse(id int) (*models.House, error) {
	ret := _m.Called(id)

	var r0 *models.House
	if rf, ok := ret.Get(0).(func(int) *models.House); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.House)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindHouses provides a mock function with given fields: request, searchType, search, sortBy, sortType, limit, page
func (_m *HouseRepository) FindHouses(request *dto.BookHouseRequest, searchType string, search string, sortBy string, sortType string, limit string, page string) ([]*models.House, error) {
	ret := _m.Called(request, searchType, search, sortBy, sortType, limit, page)

	var r0 []*models.House
	if rf, ok := ret.Get(0).(func(*dto.BookHouseRequest, string, string, string, string, string, string) []*models.House); ok {
		r0 = rf(request, searchType, search, sortBy, sortType, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.House)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.BookHouseRequest, string, string, string, string, string, string) error); ok {
		r1 = rf(request, searchType, search, sortBy, sortType, limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookingById provides a mock function with given fields: resId
func (_m *HouseRepository) GetBookingById(resId int) (*models.Reservation, error) {
	ret := _m.Called(resId)

	var r0 *models.Reservation
	if rf, ok := ret.Get(0).(func(int) *models.Reservation); ok {
		r0 = rf(resId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(resId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirstPhoto provides a mock function with given fields: houseId
func (_m *HouseRepository) GetFirstPhoto(houseId uint) (*models.HousePhoto, error) {
	ret := _m.Called(houseId)

	var r0 *models.HousePhoto
	if rf, ok := ret.Get(0).(func(uint) *models.HousePhoto); ok {
		r0 = rf(houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HousePhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPhotosByHouseId provides a mock function with given fields: houseId
func (_m *HouseRepository) GetPhotosByHouseId(houseId uint) ([]*models.HousePhoto, error) {
	ret := _m.Called(houseId)

	var r0 []*models.HousePhoto
	if rf, ok := ret.Get(0).(func(uint) []*models.HousePhoto); ok {
		r0 = rf(houseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.HousePhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(houseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPhotos provides a mock function with given fields:
func (_m *HouseRepository) GetTotalPhotos() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBooking provides a mock function with given fields: booking
func (_m *HouseRepository) SaveBooking(booking *models.Reservation) (*models.Reservation, error) {
	ret := _m.Called(booking)

	var r0 *models.Reservation
	if rf, ok := ret.Get(0).(func(*models.Reservation) *models.Reservation); ok {
		r0 = rf(booking)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Reservation) error); ok {
		r1 = rf(booking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePhotos provides a mock function with given fields: houseId, photos
func (_m *HouseRepository) SavePhotos(houseId uint, photos []*models.HousePhoto) ([]*models.HousePhoto, error) {
	ret := _m.Called(houseId, photos)

	var r0 []*models.HousePhoto
	if rf, ok := ret.Get(0).(func(uint, []*models.HousePhoto) []*models.HousePhoto); ok {
		r0 = rf(houseId, photos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.HousePhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, []*models.HousePhoto) error); ok {
		r1 = rf(houseId, photos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHouse provides a mock function with given fields: userId, houseId, input
func (_m *HouseRepository) UpdateHouse(userId uint, houseId uint, input *dto.UpdateHouseRequest) (*models.House, error) {
	ret := _m.Called(userId, houseId, input)

	var r0 *models.House
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.UpdateHouseRequest) *models.House); ok {
		r0 = rf(userId, houseId, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.House)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.UpdateHouseRequest) error); ok {
		r1 = rf(userId, houseId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHouseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewHouseRepository creates a new instance of HouseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHouseRepository(t mockConstructorTestingTNewHouseRepository) *HouseRepository {
	mock := &HouseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
