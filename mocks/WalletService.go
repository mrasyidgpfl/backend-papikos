// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project/git.garena.com/sea-labs-id/batch-01/rasyid-wijaya/final-project-backend-papikos/dto"

	mock "github.com/stretchr/testify/mock"

	models "final-project/git.garena.com/sea-labs-id/batch-01/rasyid-wijaya/final-project-backend-papikos/models"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

// GetWalletFromUserId provides a mock function with given fields: id
func (_m *WalletService) GetWalletFromUserId(id uint) (*models.Wallet, error) {
	ret := _m.Called(id)

	var r0 *models.Wallet
	if rf, ok := ret.Get(0).(func(uint) *models.Wallet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pay provides a mock function with given fields: userId, input
func (_m *WalletService) Pay(userId uint, input *dto.BookingPaymentRequest) (*dto.BookingPaymentResponse, error) {
	ret := _m.Called(userId, input)

	var r0 *dto.BookingPaymentResponse
	if rf, ok := ret.Get(0).(func(uint, *dto.BookingPaymentRequest) *dto.BookingPaymentResponse); ok {
		r0 = rf(userId, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BookingPaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.BookingPaymentRequest) error); ok {
		r1 = rf(userId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: d
func (_m *WalletService) TopUp(d *dto.TopUpRequest) (*dto.TopUpResponse, error) {
	ret := _m.Called(d)

	var r0 *dto.TopUpResponse
	if rf, ok := ret.Get(0).(func(*dto.TopUpRequest) *dto.TopUpResponse); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopUpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.TopUpRequest) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletService(t mockConstructorTestingTNewWalletService) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
